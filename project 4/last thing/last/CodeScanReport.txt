Scan results:
>> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
   OWASP:A9-Using_Components_with_Known_Vulnerabilities
   Severity:Critical
   Location: SampleCode/onLogin.py:8
7	    def process(self, user, startupcmd):
8	        p = subprocess.Popen([startupcmd], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
9	        r = p.communicate()[0]
   Recommendation:
      https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities.html
   
   >> Issue: [B404:blacklist] Consider possible security implications associated with subprocess module.
    OWASP:FALSE POSITIVE
    Severity:FALSE POSITIVE
    Location: SampleCode/onLogin.py:1
         1	import os, sys, subprocess
         2	
         3	class userLogin():
         4	    def __init__(self):
    Recommendation: FALSE POSITIVE need more info
--------------------------------------------------
>> Issue: [B703:django_mark_safe] Potential XSS on mark_safe function.
   OWASP:A7-Cross-site Scripting (XSS)
   Severity:High
   Location: SampleCode/create_customer.py:24
23	        self.password = hashlib.md5(password.encode('utf-8')).hexdigest()
24	        self.banner = safestring.mark_safe(banner)
25	
   Recommendation: i Recommend to Sanitize input
       https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS).html
--------------------------------------------------
>> Issue: [B303:blacklist] Use of insecure MD2, MD4, MD5, or SHA1 hash function.
   OWASP:A3-Sensitive Data Exposure
   Severity: High
   Location: SampleCode/create_customer.py:23
22	        self.email = email
23	        self.password = hashlib.md5(password.encode('utf-8')).hexdigest()
24	        self.banner = safestring.mark_safe(banner)
   Recommendation: MD5 should never be used for passwords, we need to migrate to bcrypt or another hash that is slow hashing.
      https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure
--------------------------------------------------
>> Issue: [B320:blacklist] Using lxml.etree.fromstring to parse untrusted XML data is known to be vulnerable to XML attacks. Replace lxml.etree.fromstring with its defusedxml equivalent function.
   OWASP:A4-XML External Entities (XXE)
   Severity:High
   Location: SampleCode/fix_customer_orders.py:11
10	def customerOrdersXML():
11	    root = lxml.etree.fromstring(xmlString)
12	    root = fromstring(xmlString)
   Recommendation: https://owasp.org/www-project-top-ten/2017/A4_2017-XML_External_Entities_(XXE).html
--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'mysecurepassword'
   OWASP:A6-Security Misconfiguration
   Severity:Medium
   Location: SampleCode/init_db.py:14
13	    def open(self):
14	        self.conn = psycopg2.connect(user = "webappuser",
15	                                    password = "mysecurepassword",
16	                                    host = "localhost",
17	                                    port = "5432",
18	                                    database = "website")
19	        self.cursor = self.conn.cursor()
   Recommendation: never use default passwords.
   https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration
--------------------------------------------------
>> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
   OWASP:FALSE POSITIVE
   Severity:FALSE POSTIVE
   Location: SampleCode/init_db.py:40
39	       letters = string.ascii_lowercase
40	       result_str = ''.join(random.choice(letters) for i in range(length))
41	       return result_str
   Recommendation: FALSE POSITIVE, this code is used to generate random password
--------------------------------------------------

